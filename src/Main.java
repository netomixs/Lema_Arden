
import java.util.ArrayList;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main extends javax.swing.JFrame {

    ArrayList<Expresion> lista;
    char qVar = 'q';
    boolean minimo = false;

    public Main() {
        initComponents();
        lista = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        txtResultado.setText("q0=0q1+1q1+1q2\nq1=0q1+1q1+1q2\nq2=0q1+0q2+1q2");
        jScrollPane1.setViewportView(txtResultado);

        jButton1.setText("Calcular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        lista = new ArrayList<>();
        String str = txtResultado.getText();
        str = str.replaceAll("\n", ",");
        String arr[] = str.split(",");
        for (int i = 0; i < arr.length; i++) {
            lista.add(determinar(arr[i]));
        }
        terminar();
        mostarResultado();
    }//GEN-LAST:event_jButton1ActionPerformed

    int get(int cabeza, Q valor,String origen) {
        for (int i = 1; i < lista.size(); i++) {
            if (lista.get(i).X.equals(valor.X)) {
                if (lista.get(i).isAren()) {
                    return i;
                } else {
                    Q q = lista.get(i).elemento.get(0);
                    if (q.X.equals(origen)) {
                         q.R +="*";
                         q.X="";
                         q.isEvaluado=true;
                         lista.get(i).setElementobyInedx(q, 0);
                        return i;
                    } else {
                        int n=get(i, q,lista.get(i).X);
                        q.R = q.R + "(" + lista.get(n).elemento.get(0).R + ")";
                        q.X = "";
                        q.isEvaluado = true;
                        lista.get(i).setElementobyInedx(q, 0);
                        return i;
                    }
                }
            }
        }
        return 0;
    }

    void terminar() {
         lista.get(0).isAren();
        for (int i = 0; i < lista.get(0).getSize(); i++) {
           
            int index=get(i, lista.get(0).elemento.get(i),lista.get(i).X);
            lista.get(0).elemento.get(i).R += "(" + lista.get(index).elemento.get(0).R + ")";
            System.out.println("Evaluendo para"+lista.get(0).elemento.get(i).X);
            lista.get(0).elemento.get(i).X = "";
        }
        System.out.println("Final "+lista.get(0).elemento.get(0).X);
    }

    Expresion determinar(String a) {
        System.out.println("Cadena analizar:" + a);
        Expresion ex = new Expresion();
        Pattern pattern = Pattern.compile("^" + qVar + "\\d+");
        Matcher matcher = pattern.matcher(a);
        String q = "";
        //Obtene q como inidce
        if (matcher.find()) {
            int inicio = matcher.start();
            int fin = matcher.end();
            q = a.substring(inicio, fin);
            a = a.replaceAll("^" + qVar + "\\d+", "");
            a = a.replace("=", "");
            ex.setX(q);
        } else {
            return null;
        }
        pattern = Pattern.compile("(\\w+" + qVar + "\\d+)");
        matcher = pattern.matcher(a);
        MatchResult result = matcher.toMatchResult();
        //System.out.println(result+"<----");
        while (matcher.find()) {
            ex.addExpresion(determinarNodo(matcher.group()));
        }
            if(a.equals("v")){
                ex.addExpresion(determinarNodo("v"));
            }
        return ex;

    }

    Q determinarNodo(String str) {
        System.out.println(str);
        if(str.equals("v")){
             Q nodo1 = new Q("v", "");
             nodo1.isEvaluado=true;
              return nodo1;
        }
        String x = "";
        Pattern pattern = Pattern.compile("(" + qVar + "\\d+)");
        Matcher matcher = pattern.matcher(str);
        int inicio = 0, fin = 0;
        if (matcher.find()) {
            inicio = matcher.start();
            x = matcher.group(0);
            str = str.replaceFirst(x, "");
        }
        Q nodo = new Q(str, x);
        return nodo;
    }

    void mostarResultado() {
        System.out.println("Resultado");
        this.lista.get(0).mostrarExpresion();
        this.txtResultado.setText(this.lista.get(0).getExpresion());
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    void mostrarLista() {
        for (Expresion e : lista) {

            e.mostrarExpresion();

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
